/*
******************************************************************************
**
** @file        : LinkerScript.ld
**
** @author      : Auto-generated by STM32CubeIDE
**
** @brief       : Linker script for STM32F401CCUx Device from STM32F4 series
**                      256Kbytes FLASH
**                      64Kbytes RAM
**
**                Set heap size, stack size and stack location according
**                to application requirements.
**
**                Set memory bank area and size if external memory is used
**
**  Target      : STMicroelectronics STM32
**
**  Distribution: The file is distributed as is, without any warranty
**                of any kind.
**
******************************************************************************
** @attention
**
** Copyright (c) 2025 STMicroelectronics.
** All rights reserved.
**
** This software is licensed under terms that can be found in the LICENSE file
** in the root directory of this software component.
** If no LICENSE file comes with this software, it is provided AS-IS.
**
******************************************************************************
*/

/* Entry Point */
ENTRY(Reset_Handler)

/* Highest address of the user mode stack */
_estack = ORIGIN(RAM) + LENGTH(RAM); /* end of "RAM" Ram type memory */

_Min_Heap_Size = 0x200; /* required amount of heap */
_Min_Stack_Size = 0x400; /* required amount of stack */

/* Memories definition */
MEMORY
{
  /* All RAM is initialized except the RAM__NOINIT (256 bytes) */
  RAM__COMM                 (xrw)  : ORIGIN = 0x20000000,          LENGTH = 0x0C00  /* 3k */
  RAM__NOINIT               (xrw)  : ORIGIN = 0x20000C00,          LENGTH = 0x0100
  RAM__STACK                (xrw)  : ORIGIN = 0x20000D00,          LENGTH = 0x0700
  RAM__OSD                  (xrw)  : ORIGIN = 0x20001400,          LENGTH = 0x0020
  RAM__DFA                  (xrw)  : ORIGIN = 0x20001420,          LENGTH = 0x0200
  RAM__SSD1306              (xrw)  : ORIGIN = 0x20001620,          LENGTH = 0x0500  /* 1.25k */
  RAM                       (xrw)  : ORIGIN = 0x20001B20,          LENGTH = 64k-0x1B20

  /* Flash */
  /*FLASH__SW                 (rx)   : ORIGIN = 0x8000000,           LENGTH = 64k - 0x8*/   /* FLASH block 0+1+2+3 */
  /*FLASH__SW_CRC             (rx)   : ORIGIN = 0x800FFF8,           LENGTH = 0x8*/         /* FLASH block 3 - End */
  /*FLASH__DATAFLASH_CALIB    (rx)   : ORIGIN = 0x8010000,           LENGTH = 32K*/         /* FLASH block 4 - First half part */
  /*FLASH__BOOTLOADER_CUSTOM  (rx)   : ORIGIN = 0x8018000,           LENGTH = 32K*/         /* FLASH block 4 - Last half part */
  /*FLASH__SW_UPDATE          (rx)   : ORIGIN = 0x8020000,           LENGTH = 128K*/        /* FLASH block 5 */
  FLASH__SW                 (rx)   : ORIGIN = 0x8000000,           LENGTH = 256K


  /* Ideal FLASH structure:
    32k  (FLASH blocks 0+1)  --> Bootloader SW + CRC DataFlash/Calibrations check + CRC APP check + Jump to APP
    16K  (FLASH block  2)    --> DataFlash/Calibrations + CRC
    80k  (FLASH blocks 3+4)  --> Application SW + CRC
    128k (FLASH block  5)    --> SW to update (new DataFlash/Calibrations + New Application)
  */
}

/* Sections */
SECTIONS
{
  /* COMM data */
  .Ram_COMM (NOLOAD):
  {
    KEEP(*(*.Ram_COMM*))        /* place all symbols in input sections that start with .Ram_COMM */
  } > RAM__COMM

  /* No init data */
  .noinit (NOLOAD):
  {
    . = ALIGN(4);
    KEEP(*(*.noinit*))          /* place all symbols in input sections that start with .noinit */
    . = ALIGN(4);
  } > RAM__NOINIT

  /* OSD data */
  .Ram_OSD (NOLOAD):
  {
    . = ALIGN(4);
    KEEP(*(*.Ram_OSD*))         /* place all symbols in input sections that start with .Ram_OSD */
    . = ALIGN(4);
  } > RAM__OSD

  /* DFA data */
  .Ram_DFA (NOLOAD):
  {
    . = ALIGN(4);
    KEEP(*(*.Ram_DFA*))         /* place all symbols in input sections that start with .Ram_DFA */
    . = ALIGN(4);
  } > RAM__DFA

  /* SSD1306 data */
  .Ram_SSD1306 (NOLOAD):
  {
    . = ALIGN(4);
    KEEP(*(*.Ram_SSD1306*))         /* place all symbols in input sections that start with .Ram_SSD1306 */
    . = ALIGN(4);
  } > RAM__SSD1306

  /* The startup code into "FLASH" Rom type memory */
  .isr_vector :
  {
    . = ALIGN(4);
    KEEP(*(.isr_vector)) /* Startup code */
    . = ALIGN(4);
  } >FLASH__SW

  /* The program code and other data into "FLASH" Rom type memory */
  .text :
  {
    . = ALIGN(4);
    *(.text)           /* .text sections (code) */
    *(.text*)          /* .text* sections (code) */
    *(.glue_7)         /* glue arm to thumb code */
    *(.glue_7t)        /* glue thumb to arm code */
    *(.eh_frame)

    KEEP (*(.init))
    KEEP (*(.fini))

    . = ALIGN(4);
    _etext = .;        /* define a global symbols at end of code */
  } >FLASH__SW

  /* Constant data into "FLASH" Rom type memory */
  .rodata :
  {
    . = ALIGN(4);
    *(.rodata)         /* .rodata sections (constants, strings, etc.) */
    *(.rodata*)        /* .rodata* sections (constants, strings, etc.) */
    . = ALIGN(4);
  } >FLASH__SW

  .ARM.extab   : {
    . = ALIGN(4);
    *(.ARM.extab* .gnu.linkonce.armextab.*)
    . = ALIGN(4);
  } >FLASH__SW

  .ARM : {
    . = ALIGN(4);
    __exidx_start = .;
    *(.ARM.exidx*)
    __exidx_end = .;
    . = ALIGN(4);
  } >FLASH__SW

  .preinit_array     :
  {
    . = ALIGN(4);
    PROVIDE_HIDDEN (__preinit_array_start = .);
    KEEP (*(.preinit_array*))
    PROVIDE_HIDDEN (__preinit_array_end = .);
    . = ALIGN(4);
  } >FLASH__SW

  .init_array :
  {
    . = ALIGN(4);
    PROVIDE_HIDDEN (__init_array_start = .);
    KEEP (*(SORT(.init_array.*)))
    KEEP (*(.init_array*))
    PROVIDE_HIDDEN (__init_array_end = .);
    . = ALIGN(4);
  } >FLASH__SW

  .fini_array :
  {
    . = ALIGN(4);
    PROVIDE_HIDDEN (__fini_array_start = .);
    KEEP (*(SORT(.fini_array.*)))
    KEEP (*(.fini_array*))
    PROVIDE_HIDDEN (__fini_array_end = .);
    . = ALIGN(4);
  } >FLASH__SW

  /* Used by the startup to initialize data */
  _sidata = LOADADDR(.data);

  /* Initialized data sections into "RAM" Ram type memory */
  .data :
  {
    . = ALIGN(4);
    _sdata = .;        /* create a global symbol at data start */
    *(.data)           /* .data sections */
    *(.data*)          /* .data* sections */
    *(.RamFunc)        /* .RamFunc sections */
    *(.RamFunc*)       /* .RamFunc* sections */

    . = ALIGN(4);
    _edata = .;        /* define a global symbol at data end */

  } >RAM AT> FLASH__SW

  /* Uninitialized data section into "RAM" Ram type memory */
  . = ALIGN(4);
  .bss :
  {
    /* This is used by the startup in order to initialize the .bss section */
    _sbss = .;         /* define a global symbol at bss start */
    __bss_start__ = _sbss;
    *(.bss)
    *(.bss*)
    *(COMMON)

    . = ALIGN(4);
    _ebss = .;         /* define a global symbol at bss end */
    __bss_end__ = _ebss;
  } >RAM

  /* User_heap_stack section, used to check that there is enough "RAM" Ram  type memory left */
  ._user_heap_stack :
  {
    . = ALIGN(8);
    PROVIDE ( end = . );
    PROVIDE ( _end = . );
    . = . + _Min_Heap_Size;
    . = . + _Min_Stack_Size;
    . = ALIGN(8);
  } >RAM__STACK

  /* Remove information from the compiler libraries */
  /DISCARD/ :
  {
    libc.a ( * )
    libm.a ( * )
    libgcc.a ( * )
  }

  .ARM.attributes 0 : { *(.ARM.attributes) }
}
