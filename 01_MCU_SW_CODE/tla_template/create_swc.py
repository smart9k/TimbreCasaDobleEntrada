
from datetime import date


tla_name = raw_input( 'Write TLA of swC to be created  ' ).lower()
time_now = date.today().strftime("%d/%m/%Y")


# TLA_API.H
with open('%s_api.h'%(tla_name), 'w') as f:
    f.write( "/* Author:   Sergio Martinez Porras\n" )
    f.write( " * Date:     %s\n"%(time_now) )
    f.write( " */\n" )
    f.write( "\n" )
    f.write( "#ifndef %s_API_H_\n"%(tla_name.upper()) )
    f.write( "#define %s_API_H_\n"%(tla_name.upper()) )
    f.write( "\n" )
    f.write( "    #define %s_MAJOR_VERSION       1\n"%(tla_name.upper()) )
    f.write( "    #define %s_MINOR_VERSION       0\n"%(tla_name.upper()) )
    f.write( "    #define %s_PATCH_VERSION       0\n"%(tla_name.upper()) )
    f.write( "\n" )
    f.write( "\n" )
    f.write( "    /* Include's -----------------------------------------------------------------*/\n" )
    f.write( '        #include "%s_cfg.h"\n'%(tla_name) )
    f.write( "\n" )
    f.write( "\n" )
    f.write( "    /* Public Defines ------------------------------------------------------------*/\n" )
    f.write( "\n" )
    f.write( "\n" )
    f.write( "    /* Enumerates / Structures ---------------------------------------------------*/\n" )
    f.write( "\n" )
    f.write( "\n" )
    f.write( "    /* Public functions ----------------------------------------------------------*/\n" )
    f.write( "\n" )
    f.write( "        /* Init actions */\n" )
    f.write( "        void %s_Init(void);\n"%(tla_name.upper()) )
    f.write( "        void %s_DeInit(void);\n"%(tla_name.upper()) )
    f.write( "        void %s_PostInit(void);\n"%(tla_name.upper()) )
    f.write( "\n" )
    f.write( "        /* Periodic %s tasks */\n"%(tla_name.upper()) )
    f.write( "        void %s_Task_10ms(void);\n"%(tla_name.upper()) )
    f.write( "        void %s_Task_50ms(void);\n"%(tla_name.upper()) )
    f.write( "        void %s_Task_100ms(void);\n"%(tla_name.upper()) )
    f.write( "\n" )
    f.write( "        /* Test functions */\n" )
    f.write( "        #ifdef %s_TEST_FUNCTIONS_ENABLED\n"%(tla_name.upper()) )
    f.write( "            void %s_Test_01(void);\n"%(tla_name.upper()) )
    f.write( "            void %s_Test_02(void);\n"%(tla_name.upper()) )
    f.write( "        #endif\n" )
    f.write( "\n" )
    f.write( "#endif /* %s_API_H_ */\n"%(tla_name.upper()) )
    f.write( "\n" )
    #
    f.close()
    print '--> Generated file %s_api.h'%(tla_name)
#


# TLA_CFG.H
with open('%s_cfg.h'%(tla_name), 'w') as f:
    f.write( "/* Author:   Sergio Martinez Porras\n" )
    f.write( " * Date:     %s\n"%(time_now) )
    f.write( " */\n" )
    f.write( "\n" )
    f.write( "\n" )
    f.write( "/* Configuration Defines -------------------------------------------------------------------*/\n" )
    f.write( "\n" )
    f.write( "    /* Compilation defines */\n" )
    f.write( "        //#define %s_TEST_FUNCTIONS_ENABLED\n"%(tla_name.upper()) )
    f.write( "\n" )
    f.write( "\n" )
    f.write( "    /* General Options */\n" )
    f.write( "\n" )
    f.write( "\n" )
    f.write( "    /* Other */\n" )
    f.write( "        #define %s_PERIOD_TASK_10ms            (10u)\n"%(tla_name.upper()) )
    f.write( "        #define %s_PERIOD_TASK_50ms            (50u)\n"%(tla_name.upper()) )
    f.write( "        #define %s_PERIOD_TASK_100ms           (100u)\n"%(tla_name.upper()) )
    f.write( "\n" )
    #
    f.close()
    print '--> Generated file %s_cfg.h'%(tla_name)
#



# TLA.C
with open('%s.c'%(tla_name), 'w') as f:
    f.write( "\n" )
    f.write( "/* ################## Include's ####################### */\n" )
    f.write( "\n" )
    f.write( "    /* Include types */\n" )
    f.write( '    #include "libTypes_api.h"\n' )
    f.write( '    #include "dataFormat_api.h"\n' )
    f.write( "\n" )
    f.write( "    /* Local prototypes */\n" )
    f.write( '    #include "%s_api.h"\n'%(tla_name) )
    f.write( '    #include "%s_cfg.h"\n'%(tla_name) )
    f.write( "\n" )
    f.write( "    /* DFA's */\n" )
    f.write( '    #include "dfaIO_api.h"\n' )
    f.write( '    #include "dfaIAP_api.h"\n' )
    f.write( '    #include "dfaCOMM_api.h"\n' )
    f.write( "\n" )
    f.write( "    /* Include external API's */\n" )
    f.write( "\n" )
    f.write( "\n" )
    f.write( "/* ################## Define's ######################### */\n" )
    f.write( "\n" )
    f.write( "\n" )
    f.write( "/* ################## Global variables ################# */\n" )
    f.write( "\n" )
    f.write( "\n" )
    f.write( "/* ################## Local functions / Macros ######### */\n" )
    f.write( "    void %s_InternalFunction01(void);\n"%(tla_name) )
    f.write( "    void %s_InternalFunction02(void);\n"%(tla_name) )
    f.write( "\n" )
    f.write( "\n" )
    f.write( "\n" )
    f.write( "//#####################################################\n" )
    f.write( "//#####################  SW Code  #####################\n" )
    f.write( "//#####################################################\n" )
    f.write( "\n" )
    f.write( "/* ********************************* INIT ********************************* */\n" )
    f.write( "void %s_Init(void) {\n"%(tla_name.upper()) )
    f.write( "    // Add code\n" )
    f.write( "}\n" )
    f.write( "\n" )
    f.write( "\n" )
    f.write( "void %s_DeInit(void) {\n"%(tla_name.upper()) )
    f.write( "    // Add code\n" )
    f.write( "}\n" )
    f.write( "\n" )
    f.write( "\n" )
    f.write( "void %s_PostInit(void) {\n"%(tla_name.upper()) )
    f.write( "    // Add code\n" )
    f.write( "}\n" )
    f.write( "\n" )
    f.write( "\n" )
    f.write( "\n" )
    f.write( "/* ********************************* PERIODIC TASKS ********************************* */\n" )
    f.write( "void %s_Task_10ms(void) {\n"%(tla_name.upper()) )
    f.write( "    // Add code\n" )
    f.write( "}\n" )
    f.write( "\n" )
    f.write( "\n" )
    f.write( "void %s_Task_50ms(void) {\n"%(tla_name.upper()) )
    f.write( "    // Add code\n" )
    f.write( "}\n" )
    f.write( "\n" )
    f.write( "\n" )
    f.write( "void %s_Task_100ms(void) {\n"%(tla_name.upper()) )
    f.write( "    // Add code\n" )
    f.write( "}\n" )
    f.write( "\n" )
    f.write( "\n" )
    f.write( "\n" )
    f.write( "/* ********************************* OTHER TASKS ********************************* */\n" )
    f.write( "void %s_InternalFunction01(void) {\n"%(tla_name) )
    f.write( "    // Add code\n" )
    f.write( "}\n" )
    f.write( "\n" )
    f.write( "\n" )
    f.write( "void %s_InternalFunction02(void) {\n"%(tla_name) )
    f.write( "    // Add code\n" )
    f.write( "}\n" )
    f.write( "\n" )
    f.write( "\n" )
    f.write( "\n" )
    f.write( "/* ********************************* REPORT INFO ********************************* */\n" )
    f.write( "\n" )
    f.write( "\n" )
    f.write( "\n" )
    f.write( "/* ********************************* TEST FUNCTIONS ********************************* */\n" )
    f.write( "#ifdef %s_TEST_FUNCTIONS_ENABLED\n"%(tla_name.upper()) )
    f.write( "    void %s_Test_01(void) {\n"%(tla_name.upper()) )
    f.write( "        // Add code\n" )
    f.write( "    }\n" )
    f.write( "\n" )
    f.write( "\n" )
    f.write( "    void %s_Test_02(void) {\n"%(tla_name.upper()) )
    f.write( "        // Add code\n" )
    f.write( "    }\n" )
    f.write( "#endif\n" )
    f.write( "\n" )
    #
    f.close()
    print '--> Generated file %s.c'%(tla_name)
#


